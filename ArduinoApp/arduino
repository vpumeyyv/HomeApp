/************************Hardware Related Macros************************************/
#define         MG_PIN                       (A0)     //define which analog input channel you are going to use
#define         MQ2_PIN                       (A1)     //define which analog input channel you are going to use
#define         MQ138_PIN                       (A2)     //define which analog input channel you are going to use
#define         MQ7_PIN                       (A3)     //define which analog input channel you are going to use
#define         MQ131_PIN                       (A4)     //define which analog input channel you are going to use
#define         MQ137_PIN                       (A5)     //define which analog input channel you are going to use

#define         DC_GAIN                      (8.5)   //define the DC gain of amplifier

#define         RL2_VALUE                     (5)     //define the load resistance on the board, in kilo ohms
#define         RL138_VALUE                     (20)     //define the load resistance on the board, in kilo ohms
#define         RL7_VALUE                     (10)     //define the load resistance on the board, in kilo ohms
#define         RL131_VALUE                     (20)     //define the load resistance on the board, in kilo ohms
#define         RL137_VALUE                     (47)     //define the load resistance on the board, in kilo ohms

#define         RO_CLEAN_AIR_FACTOR          (9.83)  //RO_CLEAR_AIR_FACTOR=(Sensor resistance in clean air)/RO,
                                                     //which is derived from the chart in datasheet

/***********************Software Related Macros************************************/
#define         CALIBARAION_SAMPLE_TIMES     (50)    //define how many samples you are going to take in the calibration phase
#define         CALIBRATION_SAMPLE_INTERVAL  (500)   //define the time interal(in milisecond) between each samples in the
                                                     //cablibration phase
#define         READ_SAMPLE_INTERVAL         (50)    //define how many samples you are going to take in normal operation
#define         READ_SAMPLE_TIMES            (5)     //define the time interval(in milisecond) between each samples in 
                                                     //normal operation

/**********************Application Related Macros**********************************/
//These two values differ from sensor to sensor. user should derermine this value.
#define         ZERO_POINT_VOLTAGE           (0.220) //define the output of the sensor in volts when the concentration of CO2 is 400PPM
#define         REACTION_VOLTGAE             (0.020) //define the voltage drop of the sensor when move the sensor from air into 1000ppm CO2

#define         GAS_LPG                      (0)
#define         GAS_CO                       (1)
#define         GAS_SMOKE                    (2)

#define         GAS_NHEXANE                      (3)
#define         GAS_BENZENE                       (4)
#define         GAS_C3H8                    (5)

#define         GAS_CO7                      (6)

#define         GAS_O3                      (7)

#define         GAS_NH3                      (8)

/**********************Bluetooth Related Macros**********************************/
#include <SoftwareSerial.h>


/**********************Json Related Macros**********************************/
#include <ArduinoJson.h>


/*****************************Globals***********************************************/
float           CO2Curve[3]  =  {2.602,ZERO_POINT_VOLTAGE,(REACTION_VOLTGAE/(2.602-3))};   
                                                     //two points are taken from the curve. 
                                                     //with these two points, a line is formed which is
                                                     //"approximately equivalent" to the original curve.
                                                     //data format:{ x, y, slope}; point1: (lg400, 0.324), point2: (lg4000, 0.280) 
                                                     //slope = ( reaction voltage ) / (log400 â€“log1000) 
                                                     
float           LPGCurve[3]  =  {2.3,0.21,-0.47};   //two points are taken from the curve. 
                                                    //with these two points, a line is formed which is "approximately equivalent"
                                                    //to the original curve. 
                                                    //data format:{ x, y, slope}; point1: (lg200, 0.21), point2: (lg10000, -0.59) 
float           COCurve[3]  =  {2.3,0.72,-0.34};    //two points are taken from the curve. 
                                                    //with these two points, a line is formed which is "approximately equivalent" 
                                                    //to the original curve.
                                                    //data format:{ x, y, slope}; point1: (lg200, 0.72), point2: (lg10000,  0.15) 
float           SmokeCurve[3] ={2.3,0.53,-0.44};    //two points are taken from the curve. 
                                                    //with these two points, a line is formed which is "approximately equivalent" 
                                                    //to the original curve.
                                                    //data format:{ x, y, slope}; point1: (lg200, 0.53), point2: (lg10000,  -0.22)

float           nHexaneCurve[3]  =  {2.3,0.21,-0.47};   //two points are taken from the curve. 
                                                    //with these two points, a line is formed which is "approximately equivalent"
                                                    //to the original curve. 
                                                    //data format:{ x, y, slope}; point1: (log200, 0.21), point2: (log10000, -0.59) 
float           BenzeneCurve[3]  =  {3,1,-0.49};    //two points are taken from the curve. 
                                                    //with these two points, a line is formed which is "approximately equivalent" 
                                                    //to the original curve.
                                                    //data format:{ x, y, slope}; point1: (log1000, 0), point2: (log10000, -0.49) 
float           C3H8Curve[3]  =  {3.477,-0.30,-0.445};    //two points are taken from the curve. 
                                                    //with these two points, a line is formed which is "approximately equivalent" 
                                                    //to the original curve.
                                                    //data format:{ x, y, slope}; point1: (log800, -0.046), point2: (log3000, -0.30)
 
float           CO7Curve[3]  =  {2,1,-0.65};   //two points are taken from the curve. 
                                                    //with these two points, a line is formed which is "approximately equivalent"
                                                    //to the original curve. 
                                                    //data format:{ x, y, slope}; point1: (log100, 0), point2: (log4000, -1.046)
                                                    
float           O3Curve[3]  =  {2,-0.522,-0.86};   //two points are taken from the curve. 
                                                    //with these two points, a line is formed which is "approximately equivalent"
                                                    //to the original curve. 
                                                    //data format:{ x, y, slope}; point1: (log5, log4), point2: (log100, log0.3)      
      
float           NH3Curve[3]  =  {1.602,0,-0.317};   //two points are taken from the curve. 
                                                    //with these two points, a line is formed which is "approximately equivalent"
                                                    //to the original curve. 
                                                    //data format:{ x, y, slope}; point1: (log40, log1), point2: (log200, log0.6)                                                    
                                                    
float           Ro2           =  10;                 //Ro is initialized to 10 kilo ohms
float           Ro138           =  10;                 //Ro is initialized to 10 kilo ohms
float           Ro7           =  10;                 //Ro is initialized to 10 kilo ohms
float           Ro131           =  10;                 //Ro is initialized to 10 kilo ohms
float           Ro137           =  10;                 //Ro is initialized to 10 kilo ohms



/*****************************  MGRead *********************************************
Input:   mg_pin - analog channel
Output:  output of SEN-000007
Remarks: This function reads the output of SEN-000007
************************************************************************************/ 
float MGRead(int mg_pin)
{
    int i;
    float v=0;

    for (i=0;i<READ_SAMPLE_TIMES;i++) {
        v += analogRead(mg_pin);
        delay(READ_SAMPLE_INTERVAL);
    }
    v = (v/READ_SAMPLE_TIMES) *5/1024 ;
    return v;  
}

/*****************************  MGGetPercentage **********************************
Input:   volts   - SEN-000007 output measured in volts
         pcurve  - pointer to the curve of the target gas
Output:  ppm of the target gas
Remarks: By using the slope and a point of the line. The x(logarithmic value of ppm) 
         of the line could be derived if y(MG-811 output) is provided. As it is a 
         logarithmic coordinate, power of 10 is used to convert the result to non-logarithmic 
         value.
************************************************************************************/ 
int  MGGetPercentage(float volts, float *pcurve)
{
   if ((volts/DC_GAIN )>=ZERO_POINT_VOLTAGE) {
      return -1;
   } else { 
      return abs(pow(10, ((volts/DC_GAIN)-pcurve[1])/pcurve[2]+pcurve[0]));
   }
}


/*****************************  MQGetPercentage **********************************
Input:   rs_ro_ratio - Rs divided by Ro
         pcurve      - pointer to the curve of the target gas
Output:  ppm of the target gas
Remarks: By using the slope and a point of the line. The x(logarithmic value of ppm) 
         of the line could be derived if y(rs_ro_ratio) is provided. As it is a 
         logarithmic coordinate, power of 10 is used to convert the result to non-logarithmic 
         value.
************************************************************************************/ 
int  MQGetPercentage(float rs_ro_ratio, float *pcurve)
{
  return abs(pow(10,( ((log(rs_ro_ratio)-pcurve[1])/pcurve[2]) + pcurve[0])));
}

/****************** MQResistanceCalculation ****************************************
Input:   raw_adc - raw value read from adc, which represents the voltage
Output:  the calculated sensor resistance
Remarks: The sensor and the load resistor forms a voltage divider. Given the voltage
         across the load resistor and its resistance, the resistance of the sensor
         could be derived.
************************************************************************************/ 
float MQ2ResistanceCalculation(int raw_adc)
{
  return ( ((float)RL2_VALUE*(1023-raw_adc)/raw_adc));
}

float MQ138ResistanceCalculation(int raw_adc)
{
  return ( ((float)RL138_VALUE*(1023-raw_adc)/raw_adc));
}

float MQ7ResistanceCalculation(int raw_adc)
{
  return ( ((float)RL7_VALUE*(1023-raw_adc)/raw_adc));
}

float MQ131ResistanceCalculation(int raw_adc)
{
  return ( ((float)RL131_VALUE*(1023-raw_adc)/raw_adc));
}

float MQ137ResistanceCalculation(int raw_adc)
{
  return ( ((float)RL137_VALUE*(1023-raw_adc)/raw_adc));
}

/***************************** MQCalibration ****************************************
Input:   mq_pin - analog channel
Output:  Ro of the sensor
Remarks: This function assumes that the sensor is in clean air. It use  
         MQResistanceCalculation to calculates the sensor resistance in clean air 
         and then divides it with RO_CLEAN_AIR_FACTOR. RO_CLEAN_AIR_FACTOR is about 
         10, which differs slightly between different sensors.
************************************************************************************/ 
float MQ2Calibration(int mq_pin)
{
  int i;
  float val=0;

  for (i=0;i<CALIBARAION_SAMPLE_TIMES;i++) {            //take multiple samples
    val += MQ2ResistanceCalculation(analogRead(mq_pin));
    delay(CALIBRATION_SAMPLE_INTERVAL);
  }
  val = val/CALIBARAION_SAMPLE_TIMES;                   //calculate the average value

  val = val/RO_CLEAN_AIR_FACTOR;                        //divided by RO_CLEAN_AIR_FACTOR yields the Ro 
                                                        //according to the chart in the datasheet 

  return val; 
}

float MQ138Calibration(int mq_pin)
{
  int i;
  float val=0;

  for (i=0;i<CALIBARAION_SAMPLE_TIMES;i++) {            //take multiple samples
    val += MQ138ResistanceCalculation(analogRead(mq_pin));
    delay(CALIBRATION_SAMPLE_INTERVAL);
  }
  val = val/CALIBARAION_SAMPLE_TIMES;                   //calculate the average value

  val = val/RO_CLEAN_AIR_FACTOR;                        //divided by RO_CLEAN_AIR_FACTOR yields the Ro 
                                                        //according to the chart in the datasheet 

  return val; 
}

float MQ7Calibration(int mq_pin)
{
  int i;
  float val=0;

  for (i=0;i<CALIBARAION_SAMPLE_TIMES;i++) {            //take multiple samples
    val += MQ7ResistanceCalculation(analogRead(mq_pin));
    delay(CALIBRATION_SAMPLE_INTERVAL);
  }
  val = val/CALIBARAION_SAMPLE_TIMES;                   //calculate the average value

  val = val/RO_CLEAN_AIR_FACTOR;                        //divided by RO_CLEAN_AIR_FACTOR yields the Ro 
                                                        //according to the chart in the datasheet 

  return val; 
}

float MQ131Calibration(int mq_pin)
{
  int i;
  float val=0;

  for (i=0;i<CALIBARAION_SAMPLE_TIMES;i++) {            //take multiple samples
    val += MQ131ResistanceCalculation(analogRead(mq_pin));
    delay(CALIBRATION_SAMPLE_INTERVAL);
  }
  val = val/CALIBARAION_SAMPLE_TIMES;                   //calculate the average value

  val = val/RO_CLEAN_AIR_FACTOR;                        //divided by RO_CLEAN_AIR_FACTOR yields the Ro 
                                                        //according to the chart in the datasheet 

  return val; 
}

float MQ137Calibration(int mq_pin)
{
  int i;
  float val=0;

  for (i=0;i<CALIBARAION_SAMPLE_TIMES;i++) {            //take multiple samples
    val += MQ137ResistanceCalculation(analogRead(mq_pin));
    delay(CALIBRATION_SAMPLE_INTERVAL);
  }
  val = val/CALIBARAION_SAMPLE_TIMES;                   //calculate the average value

  val = val/RO_CLEAN_AIR_FACTOR;                        //divided by RO_CLEAN_AIR_FACTOR yields the Ro 
                                                        //according to the chart in the datasheet 

  return val; 
}

/*****************************  MQRead *********************************************
Input:   mq_pin - analog channel
Output:  Rs of the sensor
Remarks: This function use MQResistanceCalculation to caculate the sensor resistenc (Rs).
         The Rs changes as the sensor is in the different consentration of the target
         gas. The sample times and the time interval between samples could be configured
         by changing the definition of the macros.
************************************************************************************/ 
float MQ2Read(int mq_pin)
{
  int i;
  float rs=0;

  for (i=0;i<READ_SAMPLE_TIMES;i++) {
    rs += MQ2ResistanceCalculation(analogRead(mq_pin));
    delay(READ_SAMPLE_INTERVAL);
  }

  rs = rs/READ_SAMPLE_TIMES;

  return rs;  
}

float MQ138Read(int mq_pin)
{
  int i;
  float rs=0;

  for (i=0;i<READ_SAMPLE_TIMES;i++) {
    rs += MQ138ResistanceCalculation(analogRead(mq_pin));
    delay(READ_SAMPLE_INTERVAL);
  }

  rs = rs/READ_SAMPLE_TIMES;

  return rs;  
}

float MQ7Read(int mq_pin)
{
  int i;
  float rs=0;

  for (i=0;i<READ_SAMPLE_TIMES;i++) {
    rs += MQ7ResistanceCalculation(analogRead(mq_pin));
    delay(READ_SAMPLE_INTERVAL);
  }

  rs = rs/READ_SAMPLE_TIMES;

  return rs;  
}

float MQ131Read(int mq_pin)
{
  int i;
  float rs=0;

  for (i=0;i<READ_SAMPLE_TIMES;i++) {
    rs += MQ131ResistanceCalculation(analogRead(mq_pin));
    delay(READ_SAMPLE_INTERVAL);
  }

  rs = rs/READ_SAMPLE_TIMES;

  return rs;  
}

float MQ137Read(int mq_pin)
{
  int i;
  float rs=0;

  for (i=0;i<READ_SAMPLE_TIMES;i++) {
    rs += MQ137ResistanceCalculation(analogRead(mq_pin));
    delay(READ_SAMPLE_INTERVAL);
  }

  rs = rs/READ_SAMPLE_TIMES;

  return rs;  
}

/*****************************  MQGetGasPercentage **********************************
Input:   rs_ro_ratio - Rs divided by Ro
         gas_id      - target gas type
Output:  ppm of the target gas
Remarks: This function passes different curves to the MQGetPercentage function which 
         calculates the ppm (parts per million) of the target gas.
************************************************************************************/ 
int MQGetGasPercentage(float rs_ro_ratio, int gas_id)
{
  if ( gas_id == GAS_LPG ) {
     return MQGetPercentage(rs_ro_ratio,LPGCurve);
  } else if ( gas_id == GAS_CO ) {
     return MQGetPercentage(rs_ro_ratio,COCurve);
  } else if ( gas_id == GAS_SMOKE ) {
     return MQGetPercentage(rs_ro_ratio,SmokeCurve);
  } 
  
  else if ( gas_id == GAS_NHEXANE ) {
     return MQGetPercentage(rs_ro_ratio,nHexaneCurve);
  } else if ( gas_id == GAS_BENZENE ) {
     return MQGetPercentage(rs_ro_ratio,BenzeneCurve);
  } else if ( gas_id == GAS_C3H8 ) {
      return  MQGetPercentage(rs_ro_ratio,C3H8Curve);
  }
  
  else if ( gas_id == GAS_CO7 ) {
     return MQGetPercentage(rs_ro_ratio,CO7Curve);
  }

  else if ( gas_id == GAS_O3 ) {
     return MQGetPercentage(rs_ro_ratio,O3Curve);
  }

  else if ( gas_id == GAS_NH3 ) {
     return MQGetPercentage(rs_ro_ratio,NH3Curve);
  }

  else return 0;
}



void setup()
{
  Serial.begin(9600);                              //UART setup, baudrate = 9600bps

  Serial.print("Calibrating...\n");                
  Ro2 = MQ2Calibration(MQ2_PIN);                       //Calibrating the sensor. Please make sure the sensor is in clean air 
                                                    //when you perform the calibration                    
  Ro138 = MQ138Calibration(MQ138_PIN);                       //Calibrating the sensor. Please make sure the sensor is in clean air 
                                                    //when you perform the calibration
  Ro7 = MQ7Calibration(MQ7_PIN);                       //Calibrating the sensor. Please make sure the sensor is in clean air 
                                                    //when you perform the calibration                                                  
  Ro131 = MQ131Calibration(MQ131_PIN);                       //Calibrating the sensor. Please make sure the sensor is in clean air 
                                                    //when you perform the calibration
  Ro137 = MQ137Calibration(MQ137_PIN);                       //Calibrating the sensor. Please make sure the sensor is in clean air 
                                                    //when you perform the calibration
/*  Serial.print("Calibration is done...\n"); 
  Serial.print("Ro2= ");
  Serial.print(Ro2);
  Serial.print(" kohm");
  Serial.print("\n");
  
  Serial.print("Ro138= ");
  Serial.print(Ro138);
  Serial.print(" kohm");
  Serial.print("\n");
  
  Serial.print("Ro7= ");
  Serial.print(Ro7);
  Serial.print(" kohm");
  Serial.print("\n");

  Serial.print("Ro131= ");
  Serial.print(Ro131);
  Serial.print(" kohm");
  Serial.print("\n");

  Serial.print("Ro137= ");
  Serial.print(Ro137);
  Serial.print(" kohm");
  Serial.print("\n");   */
}

void loop()
{
     StaticJsonBuffer<200> jsonBuffer; 
     JsonObject& object = jsonBuffer.createObject();


    int percentage;
    float volts;

    volts = MGRead(MG_PIN);
    /* Serial.print( "MG811-Voltage:" );
    Serial.print(volts); 
    Serial.print( "V           " );  */

    percentage = MGGetPercentage(volts,CO2Curve);
    // Serial.print("CO2:");
    if (percentage == -1) {
        //Serial.print( "<400" );
        object["CO2"] = 400;
    } else {
        //Serial.print(percentage);
        object["CO2"] = percentage;
    }

   /* Serial.print( " ppm" );  
    Serial.print("\n"); */

   

   // Serial.print("\n");

   object["LPG"] = MQGetGasPercentage(MQ2Read(MQ2_PIN)/Ro2,GAS_LPG) ;
   
   object["CO"] = MQGetGasPercentage(MQ2Read(MQ2_PIN)/Ro2,GAS_CO); 
   
   object["SMOKE"] = MQGetGasPercentage(MQ2Read(MQ2_PIN)/Ro2,GAS_SMOKE);
   
   object["N-HEXANE"] = MQGetGasPercentage(MQ138Read(MQ138_PIN)/Ro138,GAS_NHEXANE);  
   
   object["BENZENE"] = MQGetGasPercentage(MQ138Read(MQ138_PIN)/Ro138,GAS_BENZENE);
   
   object["PROPANE"] = MQGetGasPercentage(MQ138Read(MQ138_PIN)/Ro138,GAS_C3H8);

   // co7 is the same as co, it's just monitored by mq7
   object["CO7"] = MQGetGasPercentage(MQ7Read(MQ7_PIN)/Ro7,GAS_CO7);
   
   object["O3"] = MQGetGasPercentage(MQ131Read(MQ131_PIN)/Ro131,GAS_O3);
    
   object["NH3"] = MQGetGasPercentage(MQ137Read(MQ137_PIN)/Ro137,GAS_NH3);

   object.printTo(Serial);
   Serial.println();
    
    delay(200);
}
